{"version":3,"sources":["helpers/romanNumerals.js","components/Converter/ConverterInput.js","components/Converter/index.js","components/HeroContent.js","components/Documentation.js","components/Header.js","components/Footer.js","App.js","theme.js","index.js"],"names":["fromRomanInputSchema","Joi","string","uppercase","pattern","required","toRomanInputSchema","number","integer","min","max","useStyles","makeStyles","theme","root","fontSize","ConverterInput","showLabel","romanInputLabel","arabicInputLabel","romanValidationError","romanValue","arabicValue","arabicValidationError","handleOnChangeArabic","handleOnChangeRoman","getLabel","label","getPlaceholder","isError","error","isNil","getErrorMessage","classes","Fragment","TextField","id","fullWidth","helperText","onChange","value","placeholder","defaultProps","Index","defaultValue","useState","setRomanValidationError","setArabicValidationError","setRomanValue","setArabicValue","prevDefaultValue","setPrevDefaultValue","convertFromRoman","roman","validate","convert","Error","values","split","map","d","reduce","acc","cur","index","array","fromRoman","message","convertFromArabic","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","Object","keys","toRoman","isNaN","Number","event","pathOr","heroContent","padding","spacing","HeroContent","Container","maxWidth","component","className","Grid","container","justify","item","xs","Typography","variant","align","color","gutterBottom","Box","my","Converter","Documentation","paragraph","appBar","borderBottom","palette","divider","toolbar","flexWrap","toolbarTitle","flexGrow","Header","AppBar","Toolbar","footer","textAlign","borderTop","marginTop","paddingTop","paddingBottom","Footer","role","aria-label","Link","href","App","createMuiTheme","primary","main","secondary","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.3d5f433d.chunk.js","sourcesContent":["import Joi from 'joi';\n\nconst fromRomanInputSchema = Joi.string().uppercase().pattern(/^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/, 'roman numerals').required();\nconst toRomanInputSchema = Joi.number().integer().min(1).max(3999).required();\n\nconst toRoman = (number) => {\n  const { error, value: arabicValue } = toRomanInputSchema.validate(number);\n\n  if (error) {\n    throw new Error('Invalid input: You must pass an integer number between 1 and 3999');\n  }\n\n  const roman = { M: 1000, CM: 900, D: 500, CD: 400, C: 100, XC: 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1 }\n\n  const reducer = (value) => (acc, cur) => {\n    while( value >= roman[cur] ) {\n      acc += cur;\n      value -= roman[cur];\n    }\n\n    return acc;\n  };\n\n  return Object.keys(roman).reduce(reducer(arabicValue), '');\n};\n\nconst fromRoman = (roman) => {\n  const { error, value: romanValue } = fromRomanInputSchema.validate(roman, { convert: false });\n\n  if (error) {\n    throw new Error('Invalid input: You must pass a valid roman numeral ( e.g. I, XC )');\n  }\n\n  const values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n  const reducer = (acc, cur, index, array) => acc + ( (array[index + 1] > cur) ? -cur : cur );\n\n  return romanValue.split('').map( d => values[d] ).reduce( reducer, 0 );\n};\n\nexport {\n  toRoman,\n  fromRoman,\n  fromRomanInputSchema,\n  toRomanInputSchema\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { isNil } from 'ramda';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& input': {\n      fontSize: '32px'\n    },\n  },\n}));\n\nconst ConverterInput = ({ showLabel, romanInputLabel, arabicInputLabel, romanValidationError, romanValue, arabicValue, arabicValidationError, handleOnChangeArabic, handleOnChangeRoman }) => {\n  const getLabel = (label) => showLabel ? label : null;\n  const getPlaceholder = (label) => !showLabel ? label : null;\n  const isError = (error) => !isNil(error);\n  const getErrorMessage = (error) => isError(error) ? error : null;\n\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <div>\n        <TextField\n          id=\"roman-numeral\"\n          classes={classes}\n          required\n          fullWidth\n          error={isError(romanValidationError)}\n          helperText={getErrorMessage(romanValidationError)}\n          label={getLabel(romanInputLabel)}\n          onChange={handleOnChangeRoman}\n          value={romanValue}\n          placeholder={getPlaceholder(romanInputLabel)}\n        />\n      </div>\n      <br/>\n      <div>\n        <TextField\n          id=\"arabic-numeral\"\n          required\n          fullWidth\n          classes={classes}\n          error={isError(arabicValidationError)}\n          helperText={getErrorMessage(arabicValidationError)}\n          label={getLabel(arabicInputLabel)}\n          onChange={handleOnChangeArabic}\n          value={arabicValue}\n          placeholder={getPlaceholder(arabicInputLabel)}\n        />\n      </div>\n    </React.Fragment>\n  );\n};\n\nConverterInput.propTypes = {\n  romanInputLabel: PropTypes.string,\n  arabicInputLabel: PropTypes.string,\n  romanValidationError: PropTypes.string,\n  arabicValidationError: PropTypes.string,\n  romanValue: PropTypes.string,\n  arabicValue: PropTypes.number,\n  handleOnChangeRoman: PropTypes.func,\n  handleOnChangeArabic: PropTypes.func,\n  showLabel: PropTypes.bool\n};\n\nConverterInput.defaultProps = {};\n\nexport default ConverterInput;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { pathOr } from 'ramda';\n\nimport { toRoman, fromRoman } from '../../helpers/romanNumerals';\nimport inputPropTypeValidation from '../../helpers/inputPropTypeValidation';\n\nimport ConverterInput from './ConverterInput';\n\nconst Index = ({defaultValue, showLabel, romanInputLabel, arabicInputLabel}) => {\n  const [romanValidationError, setRomanValidationError] = useState(null);\n  const [arabicValidationError, setArabicValidationError] = useState(null);\n  const [romanValue, setRomanValue] = useState(null);\n  const [arabicValue, setArabicValue] = useState(null);\n  const [prevDefaultValue, setPrevDefaultValue] = useState(null);\n\n  const convertFromRoman = (value) => {\n    setRomanValidationError(null);\n    setArabicValidationError(null);\n    try {\n      return fromRoman(value)\n    } catch (error) {\n      setRomanValidationError(error.message);\n      return undefined;\n    }\n  }\n\n  const convertFromArabic = (value) => {\n    setArabicValidationError(null);\n    setRomanValidationError(null);\n    try {\n      return toRoman(value);\n    } catch (error) {\n      setArabicValidationError(error.message);\n      return '';\n    }\n  }\n\n  if (defaultValue !== prevDefaultValue) {\n    if (isNaN(Number(defaultValue))) {\n      setRomanValue(defaultValue);\n      setArabicValue(convertFromRoman(defaultValue));\n      setPrevDefaultValue(defaultValue);\n    } else {\n      setArabicValue(defaultValue);\n      setRomanValue(convertFromArabic(defaultValue));\n      setPrevDefaultValue(defaultValue);\n    }\n  }\n\n  const handleOnChangeRoman = (event) => {\n    const value = pathOr('', ['target', 'value'], event);\n\n    setRomanValue(value)\n    setArabicValue(convertFromRoman(value));\n  };\n\n  const handleOnChangeArabic = (event) => {\n    const value = pathOr('', ['target', 'value'], event);\n\n    setArabicValue(value);\n    setRomanValue(convertFromArabic(value));\n  }\n\n  return (\n    <ConverterInput\n      showLabel={showLabel}\n      romanInputLabel={romanInputLabel}\n      arabicInputLabel={arabicInputLabel}\n      romanValidationError={romanValidationError}\n      arabicValidationError={arabicValidationError}\n      romanValue={romanValue}\n      arabicValue={arabicValue}\n      handleOnChangeArabic={handleOnChangeArabic}\n      handleOnChangeRoman={handleOnChangeRoman}\n    />\n  );\n};\n\nIndex.propTypes = {\n  /** defaultValue: default roman numerals to show **/\n  defaultValue: inputPropTypeValidation,\n  /** romanInputLabel: default label to show for the roman numerals input **/\n  romanInputLabel: PropTypes.string,\n  /** arabicInputLabel: default label to show for the arabic number input **/\n  arabicInputLabel: PropTypes.string,\n  /** showLabel: if true the label of the TextField is showed by default set to true **/\n  showLabel: PropTypes.bool\n};\n\nIndex.defaultProps = {\n  romanInputLabel: 'Roman numeral',\n  arabicInputLabel: 'Arabic number (integer)',\n  showLabel: true,\n};\n\nexport default Index;","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Converter from \"./Converter\";\n\nconst useStyles = makeStyles((theme) => ({\n  heroContent: {\n    padding: theme.spacing(15, 0, 6),\n  }\n}));\n\nexport default function HeroContent() {\n  const classes = useStyles();\n\n  return (\n    <Container maxWidth=\"lg\" component=\"main\" className={classes.heroContent}>\n      <Grid container justify=\"center\" >\n        <Grid item xs={6}>\n          <Typography component=\"h1\" variant=\"h3\" align=\"left\" color=\"textPrimary\" gutterBottom>\n            Roman Numerals Converter\n          </Typography>\n          <Typography variant=\"subtitle1\" align=\"left\" color=\"textSecondary\" component=\"p\">\n            This simple Roman Numerals Converter can be used at any time to convert numbers to Roman numerals and vice versa.\n          </Typography>\n          <Box my={6}>\n            <Converter showLabel={false} defaultValue=\"MMXX\" />\n          </Box>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\n\nexport default function Documentation() {\n  return (\n    <Container maxWidth=\"lg\" component=\"main\">\n      <Grid container >\n        <Grid item xs={6}>\n          <Typography component=\"h1\" variant=\"h5\" align=\"left\" color=\"textPrimary\" gutterBottom>\n            Number to Roman Numerals Conversion Examples\n          </Typography>\n          <Typography variant=\"body1\" align=\"left\" component=\"p\">\n            14 = XIV <br/>\n            79 = LXXIX <br/>\n            225 = CCXXV <br/>\n            845 = DCCCXLV <br/>\n            2022 = MMXXII <br/>\n          </Typography>\n          <br/>\n          <Typography component=\"h1\" variant=\"h5\" align=\"left\" color=\"textPrimary\" gutterBottom>\n            Roman Numeral Symbols\n          </Typography>\n          <Typography variant=\"body1\" align=\"left\" component=\"p\">\n            I = 1 V = 5 X = 10 L = 50 C = 100 D = 500 M = 1000\n          </Typography>\n        </Grid>\n        <Grid item xs={6} spacing={2}>\n          <Typography component=\"h1\" variant=\"h5\" align=\"left\" color=\"textPrimary\" gutterBottom>\n            Calculator Use\n          </Typography>\n          <Typography variant=\"body2\" align=\"left\" component=\"p\" paragraph>\n            Use this Roman numeral converter to convert numbers from 1 to 3,999 into Roman numerals. Or input a Roman numeral to get its regular Arabic number value.\n          </Typography>\n          <Typography variant=\"body2\" align=\"left\" component=\"p\" paragraph>\n            Roman numerals are a number system developed in ancient Rome where letters represent numbers. The modern use of Roman numerals involves the letters I, V, X, L, C, D, and M.\n          </Typography>\n          {/*<Typography variant=\"body2\" align=\"left\" component=\"p\" paragraph>*/}\n          {/*  To convert Roman numerals greater than 3,999 use the table below for converter inputs. Use a leading underline character to input Roman numerals with an overline. A line over a Roman numeral means it is multiplied by 1,000.*/}\n          {/*</Typography>*/}\n          <Typography variant=\"body2\" align=\"left\" component=\"p\" paragraph>\n            The largest number you can write in Roman numerals is 3,999 which is MMMCMXCIX. You can represent numbers larger than 3,999 in Roman numerals using an overline. An overline on a Roman numeral means you are multiplying that Roman numeral by 1,000. For the number 50,000 in Roman numerals you would use the Roman numeral L (50) with an overline to make it 50,000.\n            <br/>\n            For example, L means 50 × 1,000 = 50,000.\n          </Typography>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};","import React from \"react\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  toolbar: {\n    flexWrap: 'wrap',\n  },\n  toolbarTitle: {\n    flexGrow: 1,\n  }\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <AppBar classes={classes.appBar}>\n      <Toolbar classes={classes.toolbar}>\n        <Typography variant=\"h6\" color=\"inherit\" classes={classes.toolbarTitle}>\n          Roman Numerals\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};","import React from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    textAlign: 'center',\n    borderTop: `1px solid ${theme.palette.divider}`,\n    marginTop: theme.spacing(8),\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n  }\n}));\n\nexport default function Footer() {\n  const classes = useStyles();\n\n  return (\n    <Container maxWidth=\"md\" component=\"footer\" className={classes.footer}>\n      Built with <span role=\"img\" aria-label=\"Love\">❤️</span> by <Link href=\"mailto:marco_patierno@msn.com\">Marco Patierno</Link>\n    </Container>\n  );\n};","import React from 'react';\n\nimport HeroContent from './components/HeroContent';\nimport Documentation from './components/Documentation';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nexport default function App() {\n  return (\n    <React.Fragment>\n      <Header />\n      <HeroContent />\n      <Documentation />\n      <Footer />\n    </React.Fragment>\n  );\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst options = {\n  palette: {\n    primary: {\n      main: \"#388e3c\"\n    },\n    secondary: {\n      main: \"#ff9100\"\n    }\n  }\n}\n\nconst theme = createMuiTheme(options);\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}